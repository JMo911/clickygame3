{"version":3,"sources":["components/wrapper/index.js","components/cards/index.js","components/jumbotitle/index.js","components/score/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","className","this","props","children","React","Component","Cards","data-guessed","guessed","onClick","gamePlay","id","src","image","alt","name","JumboTitle","descrip","Score","role","style","score","topScore","App","state","Space","handleClick","e","forEach","element","setState","setTimeout","console","log","newSpace","array","positions","length","randomNumber","Math","floor","random","indexOf","push","shuffledCards","i","shuffle","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.029d78c5.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nclass Wrapper extends React.Component {\n    render() {\n        return <div className='wrapper'>{this.props.children}</div>\n    }\n}\n\nexport default Wrapper;","import React from 'react';\nimport './style.css'\n\nclass Cards extends React.Component {\n    render() {\n        return (\n            <div className=\"card\" data-guessed={this.props.guessed} onClick={() => this.props.gamePlay(this.props.id)}>\n                <img className=\"card-img-top\" src={this.props.image} alt={this.props.name}></img>\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{this.props.name}</h5>\n                    <p className=\"card-text\"></p>\n                </div>\n        </div>\n        );\n    }\n}\n\nexport default Cards;","import React from 'react';\nimport './style.css'\n\nclass JumboTitle extends React.Component {\n    render() {\n    return (\n           <div className=\"jumbotron col-sm-10 offset-sm-1\">\n                <div className=\"container\">\n                    <h1 className=\"display-4\">{this.props.children}</h1>\n                    <p className=\"lead\">{this.props.descrip}</p>\n                </div>\n            </div> \n    )\n    }\n};\n\nexport default JumboTitle;","import React from 'react';\nimport './style.css';\n\nclass Score extends React.Component {\n    render() {\n        return (\n            <div className=\"alert alert-info col-sm-10 offset-sm-1\" role=\"alert\" style={this.props.style}>\n                Score: {this.props.score} Top Score: {this.props.topScore} \n            </div>\n        )\n    }\n}\n\nexport default Score;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Wrapper from './components/wrapper';\nimport Cards from './components/cards';\nimport JumboTitle from './components/jumbotitle';\nimport Score from './components/score';\nimport Space from './space.json'\n\nlet topScore = 0;\nlet score = 0;\n\nclass App extends React.Component {\n  state = {\n    Space: Space,\n    score: score,\n    style: null\n  }\n  \n  handleClick = (e, id) => {\n \n    \n    Space.forEach(element => {\n      if (element.id === id) {\n        if (element.guessed === false) {\n          element.guessed = true;\n          score++;\n          this.setState({score: score});\n        } else if (element.guessed === true) {\n          if (score > topScore){\n            topScore = score;\n            //THIS IS WHERE WE NEED LOSE FUNCTIONALITY\n          }\n          score = 0;\n          const loseStyle = {\n            losscolor: {\n              'backgroundColor': 'red'\n            }\n          }\n          this.setState({style: loseStyle.losscolor});\n          setTimeout(() => this.setState({style: null}), 3000);\n          // this.setState({style: loseStyle.losscolor})\n          console.log(this.state.style);\n          \n          \n          //MAKE COMPONENT RED FOR 3 SEC?\n\n          this.setState({score: score})\n          Space.forEach(element => element.guessed = false);\n        }\n        \n      }\n\n      \n    });\n    //RESHUFFLE CARDS EACH CLICK\n    function shuffle(array) {\n      const positions=[];\n      while (positions.length < Space.length) {\n        let randomNumber = Math.floor((Math.random()*Space.length));\n        if (positions.indexOf(randomNumber) === -1) {\n          positions.push(randomNumber);\n        }\n      };\n      const shuffledCards=[];\n      for (let i = 0; i < positions.length; i++) {\n        shuffledCards.push(Space[positions[i]])\n      }\n      return shuffledCards;\n    }\n    const newSpace = shuffle(this.state.Space);\n    this.setState({Space: newSpace});\n    // console.log(newSpace);\n\n    //POTENTIALLY EASIER WAY, LEAVING FOR FUTURE REFERENCE\n    // function easyShuffle(element) {\n    //   const randomNumber = Math.floor((Math.random()*1000));\n    //   let newID = parseInt(element.id) * randomNumber;\n    //   console.log(newID);\n    //   console.log(element.key)\n    //   element.key = newID;\n    // }\n    // console.log(this.state.Space);\n    // const newSpace = this.state.Space.map(easyShuffle);\n    // console.log(newSpace.sort());\n  }\n  //END OF HANDLECLICK\n\n  render() {\n    return(\n      <Wrapper>\n        <JumboTitle \n        descrip='Welcome to Space Exploration! Make sure to visit each destination ONLY ONE TIME or you will run out of fuel and perish.'>Space Game</JumboTitle>\n        <Score score={score} topScore={topScore} \n        style={this.state.style}\n        ></Score>  \n        {this.state.Space.map(({id, name, image, guessed}) =>\n          <Cards\n          key={id}\n          name={name}\n          image = {image}\n          guessed = {guessed}\n          gamePlay = {((e) => this.handleClick(e, id))}>\n          </Cards>\n        )}\n      </Wrapper>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}